// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SurveyInterviewer.EfCore;

#nullable disable

namespace SurveyInterviewer.Migrations
{
    [DbContext(typeof(SurveysDbContext))]
    partial class SurveysDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SurveyInterviewer.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id")
                        .HasName("answers_pk");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("SurveyInterviewer.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsTerminated")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("interviews_pk");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("SurveyInterviewer.InterviewResult", b =>
                {
                    b.Property<int>("SurveyInterviewId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionAnswerId")
                        .HasColumnType("integer");

                    b.HasKey("SurveyInterviewId", "QuestionAnswerId")
                        .HasName("interviewresult_pk");

                    b.HasIndex("QuestionAnswerId");

                    b.ToTable("InterviewResults");
                });

            modelBuilder.Entity("SurveyInterviewer.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id")
                        .HasName("questions_pk");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("SurveyInterviewer.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("integer");

                    b.Property<int?>("InterviewResultQuestionAnswerId")
                        .HasColumnType("integer");

                    b.Property<int?>("InterviewResultSurveyInterviewId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("SurveyQuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("questionanswers_pk");

                    b.HasIndex("SurveyQuestionId");

                    b.HasIndex("InterviewResultSurveyInterviewId", "InterviewResultQuestionAnswerId");

                    b.HasIndex(new[] { "AnswerId", "SurveyQuestionId" }, "questionanswers_unique")
                        .IsUnique();

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("SurveyInterviewer.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id")
                        .HasName("surveys_pk");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("SurveyInterviewer.SurveyInterview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InterviewId")
                        .HasColumnType("integer");

                    b.Property<int?>("InterviewResultQuestionAnswerId")
                        .HasColumnType("integer");

                    b.Property<int?>("InterviewResultSurveyInterviewId")
                        .HasColumnType("integer");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("surveyinterview_pk");

                    b.HasIndex("SurveyId");

                    b.HasIndex("InterviewResultSurveyInterviewId", "InterviewResultQuestionAnswerId");

                    b.HasIndex(new[] { "InterviewId", "SurveyId" }, "surveyinterview_unique")
                        .IsUnique();

                    b.ToTable("SurveyInterviews");
                });

            modelBuilder.Entity("SurveyInterviewer.SurveyQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMultipleSelection")
                        .HasColumnType("boolean");

                    b.Property<int?>("NextQuestionId")
                        .HasColumnType("integer");

                    b.Property<int?>("PrevQuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("surveyquestions_pk");

                    b.HasIndex("NextQuestionId");

                    b.HasIndex("PrevQuestionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex(new[] { "SurveyId", "QuestionId" }, "surveyquestions_unique")
                        .IsUnique();

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("SurveyInterviewer.TerminatedQuestionAnswer", b =>
                {
                    b.Property<int>("QuestionAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionAnswerId");

                    b.ToTable("TerminatedQuestionAnswers");
                });

            modelBuilder.Entity("SurveyInterviewer.InterviewResult", b =>
                {
                    b.HasOne("SurveyInterviewer.QuestionAnswer", "QuestionAnswer")
                        .WithMany("InterviewResults")
                        .HasForeignKey("QuestionAnswerId")
                        .IsRequired()
                        .HasConstraintName("interviewresult_questionanswers_fk");

                    b.HasOne("SurveyInterviewer.SurveyInterview", "SurveyInterview")
                        .WithMany("InterviewResults")
                        .HasForeignKey("SurveyInterviewId")
                        .IsRequired()
                        .HasConstraintName("interviewresult_surveyinterviews_fk");

                    b.Navigation("QuestionAnswer");

                    b.Navigation("SurveyInterview");
                });

            modelBuilder.Entity("SurveyInterviewer.QuestionAnswer", b =>
                {
                    b.HasOne("SurveyInterviewer.Answer", "Answer")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("AnswerId")
                        .IsRequired()
                        .HasConstraintName("questionanswers_answers_fk");

                    b.HasOne("SurveyInterviewer.SurveyQuestion", "SurveyQuestion")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("SurveyQuestionId")
                        .IsRequired()
                        .HasConstraintName("questionanswers_surveyquestions_fk");

                    b.HasOne("SurveyInterviewer.InterviewResult", null)
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("InterviewResultSurveyInterviewId", "InterviewResultQuestionAnswerId");

                    b.Navigation("Answer");

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("SurveyInterviewer.SurveyInterview", b =>
                {
                    b.HasOne("SurveyInterviewer.Interview", "Interview")
                        .WithMany("SurveyInterviews")
                        .HasForeignKey("InterviewId")
                        .IsRequired()
                        .HasConstraintName("questionanswers_surveyquestions_fk");

                    b.HasOne("SurveyInterviewer.Survey", "Survey")
                        .WithMany("SurveyInterviews")
                        .HasForeignKey("SurveyId")
                        .IsRequired()
                        .HasConstraintName("questionanswers_answers_fk");

                    b.HasOne("SurveyInterviewer.InterviewResult", null)
                        .WithMany("SurveyInterviews")
                        .HasForeignKey("InterviewResultSurveyInterviewId", "InterviewResultQuestionAnswerId");

                    b.Navigation("Interview");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("SurveyInterviewer.SurveyQuestion", b =>
                {
                    b.HasOne("SurveyInterviewer.SurveyQuestion", "NextQuestion")
                        .WithMany("NextQuestions")
                        .HasForeignKey("NextQuestionId")
                        .HasConstraintName("surveyquestions_next_fk");

                    b.HasOne("SurveyInterviewer.SurveyQuestion", "PrevQuestion")
                        .WithMany("PrevQuestions")
                        .HasForeignKey("PrevQuestionId")
                        .HasConstraintName("surveyquestions_prev_fk");

                    b.HasOne("SurveyInterviewer.Question", "Question")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("surveyquestions_questions_fk");

                    b.HasOne("SurveyInterviewer.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId")
                        .IsRequired()
                        .HasConstraintName("surveyquestions_surveys_fk");

                    b.Navigation("NextQuestion");

                    b.Navigation("PrevQuestion");

                    b.Navigation("Question");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("SurveyInterviewer.TerminatedQuestionAnswer", b =>
                {
                    b.HasOne("SurveyInterviewer.QuestionAnswer", "QuestionAnswer")
                        .WithOne("TerminatedQuestionAnswer")
                        .HasForeignKey("SurveyInterviewer.TerminatedQuestionAnswer", "QuestionAnswerId")
                        .IsRequired()
                        .HasConstraintName("terminatedquestionanswers_questionanswers_fk");

                    b.Navigation("QuestionAnswer");
                });

            modelBuilder.Entity("SurveyInterviewer.Answer", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("SurveyInterviewer.Interview", b =>
                {
                    b.Navigation("SurveyInterviews");
                });

            modelBuilder.Entity("SurveyInterviewer.InterviewResult", b =>
                {
                    b.Navigation("QuestionAnswers");

                    b.Navigation("SurveyInterviews");
                });

            modelBuilder.Entity("SurveyInterviewer.Question", b =>
                {
                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("SurveyInterviewer.QuestionAnswer", b =>
                {
                    b.Navigation("InterviewResults");

                    b.Navigation("TerminatedQuestionAnswer");
                });

            modelBuilder.Entity("SurveyInterviewer.Survey", b =>
                {
                    b.Navigation("SurveyInterviews");

                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("SurveyInterviewer.SurveyInterview", b =>
                {
                    b.Navigation("InterviewResults");
                });

            modelBuilder.Entity("SurveyInterviewer.SurveyQuestion", b =>
                {
                    b.Navigation("NextQuestions");

                    b.Navigation("PrevQuestions");

                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
